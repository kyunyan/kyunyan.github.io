도커를 쓰는 이유 ? 
어떠한 프로그램을 다운 받는 과정을 간단한게 만들기 위해서 이다.

갖고 있는 서버, 패키지버전, 운영체제에 등등에 따라 프로그램을 설치하는 과정중에 많은 에러가 발생하게 된다.

도커를 이용하여 프로그램을 설치하면 예상치 못한 에러도 덜 발생하며, 설치하는 과정도
훨씬 간단한도록 할수있다.

도커란 무엇인가?
컨테이너를 사용하여 응용프로그램을 더 쉽게 만들고 배포하고 실행할 수 있도록 설계된 도구 이며 
컨테이너 기반의 오픈소스 가상화 플랫폼이며 생태계이다.

서버에서의 컨테이너 개념
다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해준다.
일반 컨테이너의 개념에서 물건을 손쉽게 운송해주는 것처럼 프로그램을 손쉽게 이동 배포 관리를 할수있게 해준다.

도커 이미지 와 컨테이너 정의
컨테이너는 코드와 모든 족속성을 패키지화하여 응용 프로그램이 한 컴퓨팅 환경에서 다른 컴퓨팅 환경으로 빠르고 
안정적으로 실행되도록 하는 소프트웨어의 표준 단위이다

컨테이너 이미지는 코드, 런타임, 시스템도구, 시스템라이브러리 및 설정과 같은 응용프로그램을 실행하는데 
필요한 모든것을 포함하는 가볍고 독립적이며 실행가능한 소프트웨어 패키지이다.

가상화 기술과의 차이를 통한 컨테이너의 이해

가상화 기술 나오기 전
한대의 서버를 하나 의 용도로만 사용
남는 서버 공간 그대로 방치
하나의 서버에 하나의 운영체제 , 하나의 프로그램만을 운영 안정적이긴 하나 비효율적이다.

하이버 기반의 가상화 출현 
논리적으로 공간을 분활하여 vm 이라는 독립적인 가상환경의 서버 이용 가능

하이퍼 바이저는 호스트 시스템에서 다수의 게스트 os를 구동할수 있게 하는 소프트웨어
그리고 하드웨어를 가상화하면서 하드웨어와 각각의 vm을 모니터링 하는 중간 관리자이다

하이버 바이저의 종류
네이티브 하이퍼 바이저
하이퍼 바이저가 하드웨어를 직접 제어하기에 자원 효율적으로 사용가능하며 별도의 호스트 os가 없으므로 오버헤드가 적다
하지만 여러 하드웨어 드라이버를 세팅해야 하므로 설치가 어렵다.

호트형 하이퍼 바이저
일반적인 소프트 웨어 처럼 호스트 os 위에서 실행되면 하드웨어 자원을 vm내부의 어뮬레이트하는 방식으로 오버헤드가 크다.
하지만 게스트 os종류의 대한 제약이 없고 구현이 다소쉽다.

도커와 기존 가상화기술
공통점
도커 컨테이너와 가상 머신은 기본 하드웨어에서 격리된 환경 내에 어플리케이션을 배치하는 방법이다.

차이점
가장 큰 차이점은 격리된 환경을 얼마나 격리를 시키는지의 차이

VM 과 비교햇을때 컨테이너는 하이퍼바이저와 게스트 OS가 필요하지 않으므로 더 가볍다

어플리케이션을 실행 할때는 컨테이너 방식에서는 호스트 OS위에 어플리케이션의 실행 패키지인 이미지를 배포하기만 하면 되는데 VM은 어플리케이션을 실행 하기 위해서 VM을 띄우고 자원을 할당한 다음
게스트 OS를 부팅항 

 